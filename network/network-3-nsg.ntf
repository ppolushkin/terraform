
//https://docs.microsoft.com/en-us/learn/modules/secure-and-isolate-with-nsg-and-service-endpoints/3-exercise-network-security-groups

resource "azurerm_resource_group" "rg" {
  name = "rg-weu"
  location = "West Europe"
  tags = {
    createdBy = "terraform"
  }
}

resource "azurerm_virtual_network" "vn1" {
  name = "ERP-servers"
  location = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  address_space = ["10.0.0.0/16"]
}

resource "azurerm_subnet" "apps" {
  name = "Applications"
  resource_group_name = azurerm_resource_group.rg.name
  virtual_network_name = azurerm_virtual_network.vn1.name
  address_prefixes = ["10.0.0.0/24"]
}

resource "azurerm_subnet" "db" {
  name = "Databases"
  resource_group_name = azurerm_resource_group.rg.name
  virtual_network_name = azurerm_virtual_network.vn1.name
  address_prefixes = ["10.0.1.0/24"]

  //link with storage service
  service_endpoints = ["Microsoft.Storage"]
}

//In example it is common for both subnets
resource "azurerm_network_security_group" "nsg" {
  name     = "ERP-SERVERS-NSG"
  location = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name

  security_rule {
    name                       = "AllowSSHRule"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
    description = "Allow inbound SSH"
  }

  security_rule {
    access = "Deny"
    direction = "Inbound"
    name = "DenyAccessFromDbToApp"
    priority = 150 //100 - is most prio
    protocol = "Tcp"
    source_port_range = "*"
    destination_port_range = "*"
//  you can use ip-address, prefix
//    source_address_prefix = "10.0.1.0/24"

//  or application security groups
    source_application_security_group_ids = [azurerm_application_security_group.dbServer.id]
    destination_address_prefix = "10.0.0.0/24"
  }

  security_rule {
    access = "Allow"
    direction = "Outbound"
    name = "Allow_Storage"
    priority = 190
    protocol = "*"
// this is called Service endpoint?
    source_address_prefix = "VirtualNetwork"
    source_port_range = "*"
    destination_address_prefix = "Storage"
    destination_port_range = "*"
  }

  security_rule {
    access = "Deny"
    direction = "Outbound"
    name = "Deny_Outbound_Internet"
    priority = 200
    protocol = "*"
    source_address_prefix = "VirtualNetwork"
    source_port_range = "*"
    destination_address_prefix = "Internet"
    destination_port_range = "*"
  }


}

//AppServer

resource "azurerm_public_ip" "appServer" {
  name = "appServer"
  resource_group_name = azurerm_resource_group.rg.name
  location = azurerm_resource_group.rg.location
  allocation_method = "Dynamic"
}

resource "azurerm_network_interface" "appServer" {
  name                = "appServer"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.apps.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id = azurerm_public_ip.appServer.id
  }
}

# Connect the security group to the network interface
# If you don't connect everything is allowed - only for Basic Ip address.
#
# Standard IPs are secure by default and closed to inbound traffic.
# https://docs.microsoft.com/en-us/learn/modules/design-ip-addressing-for-azure/3-azure-public-private-ip-addressing
resource "azurerm_network_interface_security_group_association" "appServer" {
  network_interface_id      = azurerm_network_interface.appServer.id
  network_security_group_id = azurerm_network_security_group.nsg.id
}

# Of course we could associate NSG with subnet but not in this example
//resource "azurerm_subnet_network_security_group_association" "example" {
//  subnet_id                 = azurerm_subnet.example.id
//  network_security_group_id = azurerm_network_security_group.example.id
//}

resource "azurerm_linux_virtual_machine" "appServer" {
  name                = "AppServer"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  size                = "Standard_F2"
  admin_username      = "adminuser"
  custom_data = filebase64("${path.module}/scripts/cloud-init.yml")

  network_interface_ids = [
    azurerm_network_interface.appServer.id,
  ]

  admin_ssh_key {
    username   = "adminuser"
    public_key = file("~/.ssh/id_rsa.pub")
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }

}

//Db server

resource "azurerm_public_ip" "dbServer" {
  name = "dbServer"
  resource_group_name = azurerm_resource_group.rg.name
  location = azurerm_resource_group.rg.location
  allocation_method = "Dynamic"
}

resource "azurerm_network_interface" "dbServer" {
  name                = "dbServer"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name


  ip_configuration {

    name                          = "internal"
    subnet_id                     = azurerm_subnet.db.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id = azurerm_public_ip.dbServer.id
  }
}

# Connect the security group to the network interface
resource "azurerm_network_interface_security_group_association" "dbServer" {
  network_interface_id      = azurerm_network_interface.dbServer.id
  network_security_group_id = azurerm_network_security_group.nsg.id
}

resource "azurerm_linux_virtual_machine" "dbServer" {
  name                = "dbServer"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  size                = "Standard_F2"
  admin_username      = "adminuser"
  custom_data = filebase64("${path.module}/scripts/cloud-init.yml")

  network_interface_ids = [
    azurerm_network_interface.dbServer.id,
  ]

  admin_ssh_key {
    username   = "adminuser"
    public_key = file("~/.ssh/id_rsa.pub")
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }

}

// Now use application security groups
resource "azurerm_application_security_group" "dbServer" {
  name                = "ERP-DB-SERVERS-ASG"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
}

// it groups NIC in some abstracted group
resource "azurerm_network_interface_application_security_group_association" "example" {
  network_interface_id          = azurerm_network_interface.dbServer.id
  application_security_group_id = azurerm_application_security_group.dbServer.id
}


// Storage account

resource "azurerm_storage_account" "acc" {
  name                     = "engineeringdocs"
  resource_group_name      = azurerm_resource_group.rg.name
  location                 = azurerm_resource_group.rg.location
  account_tier             = "Standard"
  account_replication_type = "GRS"

  //allow only from db subnet
  network_rules {
    default_action             = "Deny"
    virtual_network_subnet_ids = [azurerm_subnet.db.id]
  }
}

resource "azurerm_storage_share" "example" {
  name                 = "share"
  storage_account_name = azurerm_storage_account.acc.name
  quota                = 50
}


//Output
output "appServer-ip-address" {
  value = azurerm_public_ip.appServer.ip_address
}

output "dbServer-ip-address" {
  value = azurerm_public_ip.dbServer.ip_address
}

output "appServer-internal-ip-address" {
  value = azurerm_network_interface.appServer.ip_configuration[0].private_ip_address
}

output "dbServer-internal-ip-address" {
  value = azurerm_network_interface.dbServer.ip_configuration[0].private_ip_address
}

output "storage-acc-name" {
  value = azurerm_storage_account.acc.name
}

output "storage-acc-primary-key" {
  value = azurerm_storage_account.acc.primary_access_key
}
